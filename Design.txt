William PimmProblem Statement: Create a program that rolls four dice for two competitors (2 each). It will prompt user for their two guesses and then randomly generate the opponents’ guesses.If any guesses are correct if the number will be doubled. So if the player or opponent guesses both, one, or none of the numbers it determine which die if any will have its value doubled. Then it will compare the two total scores and determine who is the victor.Nouns: dice, competitors, guesses, scores, victorVerbs: prompt, generate, double, determineDef Diagram:Inputs: button clickguessOne guessTwoProcessing:Determine if input is an appropriate valueConvert guesses to numbersGenerate opponent guessesDetermine which player guesses are correctDouble correct guessesDetermine which opponent guesses are correctDouble correct guessesDetermine the higher total pointsOutputs:The winnerPseudocode:BEGINFunction begins rollPlayerDie that is accessed by a pressable button in the html   initialize dieOne to access HTML element named playerDieOne  initialize dieTwo to access HTML element named playerDieTwo  initialize dieThree to to access HTML element named opponentDieOne  initialize dieFour to access HTML element named opponentDieTwo  initialize dOne to generate a random number between 1 and 6 (1 and 6 included)  initialize dTwo to generate a random number between 1 and 6 (1 and 6 included)  initialize dThree to generate a random number between 1 and 6 (1 and 6 included)  initialize dFour to generate a random number between 1 and 6 (1 and 6 included)  initialize opponentGuesses to access HTML element named opponentGuesses  initialize opponentGuessOne to generate a random number between 1 and 6 (1 and 6 included)  initialize opponentGuessTwo to generate a random number between 1 and 6 (1 and 6 included)  initialize opponentDiceTotal to zero  initialize playerCountOne to zero;  initialize playerCountTwo to zero  initialize playerDiceTotal to zero  initialize playerFate = to access HTML element named playerFate  initialize playerGuessOne to empty string  initialize playerGuessTwo to empty string  initialize playerGuesses = to access HTML element named playerGuesses  initialize statusOpponent = to access HTML element named statusOpponent  initialize statusPlayer = to access HTML element named statusPlayerWHILE loop using a count (playerCountOne)  Prompt for player guess one with "Enter Ye first guess ye salty swab!"   (^^pirate talk for fun)IF the player enters something other than a number or a number not between one                  and six alert them to try againENDIF      if they answer something “ELSE” that is an acceptable answer        Convert their guess to a number         Add 1 to the count so that the loop ends      ENDELSE  ENDLOOPWHILE loop using a count (playerCountTwo)  Prompt for player guess one with "Enter Ye Second guess ye salty swab!" IF the player enters something other than a number or a number not between one                  and six alert them to try againENDIF      if they answer something “ELSE” that is an acceptable answer        Convert their guess to a number         Add 1 to the count so that the loop ends      ENDELSE  ENDLOOP       dieOne will be generated it the html location with the random value from dOne   dieTwo will be generated it the html location with the random value from dTwo  dieThree will be generated it the html location with the random value from dThree  dieFour will be generated it the html location with the random value from dFour    If the player guesses both of the numbers correctly    playerGuesses will be generated to tell the user:    “Lucky guess ye parrot loving scoundrel!! (Both guesses correct)"    multiply both dOne and dTwo by 2  ENDIF    IF the player only guesses dOne correct    Display in the html "Lucky guess ye parrot loving scoundrel!! (first guess correct)"    Then only multiply dOne by two  ENDIF   IF the player only guesses dTwo correct    Display in html "Lucky guess ye parrot loving scoundrel!! (second guess correct)"    Then only multiply dTwo by two   ENDIF   IF the player gets none Neither correct    Display in the html "ARGH HAR HAR HAR Nice guesses ye yella belly!";    ENDIF    If the opponent guesses both of the numbers correctly    opponentGuesses will display in the html :      "Your opponent guessed correctly for both of his dice"    multiply both dThree and dFour by 2  ENDIF    IF the opponent only guesses dThree correct    Display in the html "You opponent guessed correct on his first die!"    Then only multiply dThree by two  ENDIF   IF the opponent only guesses dFour correct    Display in html "You opponent guessed correct on his Second die!"    Then only multiply dFour by two   ENDIF   IF the opponent gets none Neither correct    Display in the html " Your opponent had no correct guesses!!    ENDIF    calculate players total by adding together dOne and dTwo  calculate players total by adding together dThree and dFour  statusPlayer will generate what the player rolled and display it   statusOpponent will generate what the opponent rolled and display it   IF the opponent receives a higher value than player   Display in playerFate "You lost... I hope you're a good swimmer" ENDIFIF the player beats the opponent  playerFate will display "You Get to live another day!!!"ENDIF   ENDROLLTHEDICEFUNCTIONTest Plans:VARIABLES:dieOne dieTwo dieThree dieFour dOne dTwo dThree dFour opponentGuesses opponentGuessOne opponentDiceTotalplayerCountOneplayerCountTwoplayerDiceTotalplayerFate playerGuessOne  playerGuessTwo playerGuesses statusOpponent statusPlayer // most variables don’t require input do to results and random generationTEST CASE 1: INPUT VALUES: Click roll button, 3, 5  EXPECTED RESULT: 3 correct = 6, 5 correct = 10 total = 16   ACTUAL RESULT: 3 correct = 6, 5 correct = 10 total = 16TEST CASE 2:  INPUT VALUES: roll button, 0, 6  EXPECTED RESULT: try again until user enters valid number  ACTUAL RESULT: try again !! (until user enters valid number)TEST CASE 3:  INPUT VALUES: roll button, 6, 0  EXPECTED RESULT: try again until user enters valid input  ACTUAL RESULT: try again !! (until user enters valid input)TEST CASE 4:  INPUT VALUES: roll button, cancel  EXPECTED RESULT: try again !! (until user enters valid number)  ACTUAL RESULT: try again !! (until user enters valid number)TEST CASE 5:  INPUT VALUES: roll button, 2, 2  EXPECTED RESULT: 2 incorrect = 2, 2 incorrect = 4  ACTUAL RESULT: total score = 4TEST CASE 6:  INPUT VALUES: player score < opponent score  EXPECTED RESULT: You lose… I hope you can swim.  ACTUAL RESULT: You lose… I hope you can swim.TEST CASE 7:  INPUT VALUES: player score > opponent score  EXPECTED RESULT: You win! You get to live another day!  ACTUAL RESULT: You get to live another day!!!